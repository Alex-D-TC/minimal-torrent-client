syntax = "proto3";

/* Implement a torrent-like system

1. The communication is done using the Google Protobuffer 3.x messages defined below, over TCP. The exchange will be
   synchronous. When sending a request, open the TCP connection, send the message, get back the response, then close
   the connection. When listening for requests, send back the response, then close the socket.

2. The system consists of several nodes and one hub. Your job is to implement the node. The hub will be provided
   to you by the instructor.

3. The evaluation will be done as follows:
       - Your laptops will connect to the wireless network on campus
       - The instructor's laptop will also be connected to the wireless network on campus
       - You will run 3 nodes on your laptop, each on a port chosen by you
       - Your nodes will communicate with your colleagues and the instructor's nodes
       - Initially your nodes will have no data. The instructor's hub will upload various files to various nodes,
         and ask you to replicate locally some of those files. It will also download files form you to make sure they
         are correct.

4. Node referencing: Upon starting, a node will connect to the hub and register. The hub address and port will be
   configured manually.

5. The hub will play the role of bookkeeper for the active nodes, and also of evaluator. Every search and replicate
   request sent by the hub, will contain a subnet ID, identifying the nodes involved in the test. A node, will ask the
   hub for the subnet nodes corresponding to the subnet ID and collaborate only with those node for responding to the
   request.

6. Implement handlers for al the messages below that are supposed to be handled by the node. See the "Hub -> Node",
   "Node -> Hub", and "Node -> Node" markers of each message. For instance, you should handle a ReplicateRequest,
   and send back a ReplicateResponse. You should also be able to handle a ChunkRequest, but also send a ChunkRequest.

7. Every response message contains a status field and an error message.

8. The files/chunks that you receive, do not have to be stored on disk, they can be kept in memory just as well.

9. The standard chunk size will be 1024, with the last chunk being usually smaller.

10. The first chunk index is 0.

11. When broadcasting a request to all nodes, aggregate in the response, everything that you get from other nodes,
    including failed responses, and all responses from the same node. Basically, keep everything. The hub will
    rely on these for evaluating your implementation. For example, when you get a ReplicateRequest, you need to send
    ChunkRequests to all nodes. Some will give you ChunkReponses with data, others with error. Sometimes, you might
    have to ask the same node multiple times. All these responses must be stored in the ReplicateResponse.

12. In order to determine the type of the message you receive, all messages should be wrapped in the wrapper message.
    The messages travel over the network as buffers prefixed with an int containing the length of the buffer. See the
    example below for details
        - Sending example in a mix of languages
            LocalSearchRequest lsr = ...
            Message msg = Message.newBuilder()
                                 .setType(Message.Type.LOCAL_SEARCH_REQUEST)
                                 .setLocalSearchRequest(lsr)
                                 .build();
            byte[] m = msg.toByteArray();
            int len = m.length; // 32-bit integer
            len = convert-big-endian(len);
            send(len)
            send(m)
        - Receiving example in a mix of languages
            int len = receive(sizeof(int)) // 32-bit integer
            len = convert-to-local-endianness(len);
            byte[] m = receive(len);
            Message msg = Message.parse(m);
            if(msg.hasLocalSearchRequest()) {
                do-stuff(msg.getLocalSearchRequest());
            }
13. Reference implementation
    - In the archive posted on the course website you will find the reference implementation compiled for three
      operating systems and two architectures. Use the one that matches your environment.
    - The reference implementation will create a log subdirectory of the workign directory and will store there
      execution log files. The hub and default three nodes will log in file ref.log, while other nodes having other
      aliases will use file <alias>.log (e.g. log/joe.log)
    - Usage: torr-windows-amd64.exe <hub-ip> <hub-port> <nodes-ip> <node-1-port> <node-2-port> <node-3-port> <optional-owner-alias>
        Examples:
        - Run the hub and 3 reference nodes. When no owner alias is given, the hub is started along with three nodes
          having the alias "ref"
             torr-windows-amd64.exe 127.0.0.1 5000 127.0.0.1 5001 5002 5003

        - Run 3 other reference nodes. When given an owner alias, the hub is not started, and three nodes are started
          with the given alias. The given hub should be an already active instance.
             torr-windows-amd64.exe 127.0.0.1 5000 127.0.0.1 5004 5005 5006 abc
    - The reference implementation offers a prompt where you can run a few commands. You will be interested in "help",
      "nodes", "test", "quite". The "on", "off", "done" commands are for managing the nodes during evaluation
    - To just test the reference implementation, do:
          C:>torr-windows-amd64.exe 127.0.0.1 5000 127.0.0.1 5001 5002 5003
          Listening on 127.0.0.1:5000
          torr> nodes
          on   ref        127.0.0.1:5001         127.0.0.1:5002         127.0.0.1:5003
          torr> test ref
          ...
          torr> quit
          Stopping ...
    - To test your implementation against the reference, do:
          - Start the reference implementation with hub
              C:>torr-windows-amd64.exe 127.0.0.1 5000 127.0.0.1 5001 5002 5003
              Listening on 127.0.0.1:5000
          - Start three nodes of your implementation having the hub of the reference implementation
          - Get back to the reference implementation and do:
              torr> nodes
              on   ref        127.0.0.1:5001         127.0.0.1:5002         127.0.0.1:5003
              on   joe        127.0.0.1:5004         127.0.0.1:5005         127.0.0.1:5006
              torr> test ref joe
              ...
              torr> quit
              Stopping ...
*/

// Common
message NodeId {
    string host = 1; // String containing either domain name  or IP (most likely)
    int32  port = 2;
    string owner = 3; // Short alias or acronym of the owner of the node
    int32 index = 4; // Node index within the owner's nodes. Must be 0, 1, or 2
}

enum Status {
    SUCCESS = 0;
    UNABLE_TO_COMPLETE = 1; // there are no errors, but the requested operation cannot be completed
    MESSAGE_ERROR = 2; // the incoming request or response is invalid in some way
    NETWORK_ERROR = 3; // any network communication problem
    PROCESSING_ERROR = 4; // any other error
}

message ChunkInfo {
    uint32 index = 1; // Chunk order number starting from 0
    uint32 size = 2; // The standard chunk size is 1024. Last chunks will be smaller.
    bytes hash = 3; // MD5 of the chunk content (1024 bytes or less)
}

message FileInfo {
    bytes hash = 1; // MD5 of the file content
    uint32 size = 2;
    string filename = 3;
    repeated ChunkInfo chunks = 4;
}

message NodeReplicationStatus {
    NodeId node = 1;
    uint32 chunkIndex = 2;
    Status status = 3;
    string errorMessage = 4;
}

message NodeSearchResult {
    NodeId node = 1;
    Status status = 2;
    string errorMessage = 3;
    repeated FileInfo files = 4;
}

// Parties:
//    Node -> Hub
// Description:
//   Register node presence in the system, by sending the IP, port, your name or an alias, and the order number
//   (index) of your node. The index must be 0, 1, or 2.
// Response status:
//   - SUCCESS if all went well, even if there are no results
//   - MESSAGE_ERROR if the node index is not 0, 1, or 2, or the owner is empty
//   - PROCESSING_ERROR in all other cases
message RegistrationRequest {
    string owner = 1; // Short alias or acronym of the owner of the node
    int32 index = 2; // Node index within the owner's nodes. Must be 0, 1, or 2
    int32 port = 3; // The port on which the node is listening for connections
}
message RegistrationResponse {
    Status status = 1;
    string errorMessage = 2;
}

// Parties:
//    Node -> Hub
//    Get the list of nodes corresponding to the given subnet ID. Each search and replicate requests will carry this ID
//    with it, identifying the nodes involved in its processing.
// Response status:
//   - SUCCESS if all went well, even if there are no results
//   - UNABLE_TO_COMPLETE if the hash cannot be found (this means the node list is cancelled and all messages
//                        referencing it should be ignored)
//   - PROCESSING_ERROR in all other cases
message SubnetRequest {
    int32 subnetId = 1;
}
message SubnetResponse {
    Status status = 1;
    string errorMessage = 2;
    repeated NodeId nodes = 3;
}

// Parties:
//   Hub  -> Node
//   Node -> Node
// Description:
//   Search locally for filenames matching the regex
// Response status:
//   - SUCCESS if all went well, even if there are no results
//   - MESSAGE_ERROR if the request regexp is invalid
//   - PROCESSING_ERROR in all other cases
message LocalSearchRequest {
    string regex = 1;
}
message LocalSearchResponse {
    Status status = 1;
    string errorMessage = 2;
    repeated FileInfo fileInfo = 3;
}

// Parties:
//   Hub -> Node
// Description:
//   Search all nodes (using LocalSearchRequest) for filenames matching the regex and aggregated the results
//   If no nodes reply, just return what you have locally, and declare success.
// Response status:
//   - SUCCESS if all went well, even if there are no results, and/or no other nodes replied
//   - MESSAGE_ERROR if the request regexp is invalid
//   - PROCESSING_ERROR in all other cases
// NodeSearchResult status:
//   - NETWORK_ERROR if you cannot connect to the node
//   - MESSAGE_ERROR if the response is not parsable or has the wrong type
//   - Otherwise, use LocalSearchResponse.status
message SearchRequest {
    string regex = 1;
    int32 subnetId = 2;
}
message SearchResponse {
    Status status = 1;
    string errorMessage = 2;
    repeated NodeSearchResult results = 3;
}

// Parties:
//   Hub -> Node
// Description:
//   Store locally the given file. Return the details about the file.
// Response status:
//   - SUCCESS if all went well, even if you have the file already
//   - MESSAGE_ERROR if the filename is empty (it is OK for the data to be empty)
//   - PROCESSING_ERROR in all other cases
message UploadRequest {
    string filename = 1;
    bytes  data = 2;
}
message UploadResponse {
    Status status = 1;
    string errorMessage = 2;
    FileInfo fileInfo = 3; // The FileInfo you stored or had already
}

// Parties:
//   Client -> Node
// Description:
//   Replicate this file locally, if not present already. Ask for chunks from the other nodes using ChunkRequest.
//   If a ChunkRequest fails, send it to another node until you tried al nodes. If none of the nodes gives you that
//   chunk's data,
// Response status:
//   - SUCCESS if all went well, even if you have the file already
//   - MESSAGE_ERROR if the filename in the FileInfo is empty
//   - UNABLE_TO_COMPLETE if you cannot receive all the chunks from the other nodes
//   - PROCESSING_ERROR in all other cases
// NodeReplication status:
//   - NETWORK_ERROR if you cannot connect to the node
//   - MESSAGE_ERROR if the response is not parsable or has the wrong type
//   - Otherwise, use ChunkResponse.status
message ReplicateRequest {
    FileInfo fileInfo = 1;
    int32 subnetId = 2;
}
message ReplicateResponse {
    Status status = 1;
    string errorMessage = 2;
    repeated NodeReplicationStatus nodeStatusList = 3; // The status of all the requests to other nodes
}

// Parties:
//   Node -> Node
// Description:
//   Download the specified chunk.
// Response status:
//   - SUCCESS if you have the chunk
//   - MESSAGE_ERROR if the filehash is not 16 bytes long or the index is less than zero
//   - UNABLE_TO_COMPLETE if you do not have the chunk
//   - PROCESSING_ERROR in all other cases
message ChunkRequest {
    bytes fileHash = 1; // MD5 of the file content
    uint32 chunkIndex = 2;
}
message ChunkResponse {
    Status status = 1;
    string errorMessage = 2;
    bytes data = 3; // Chunk content (1024 bytes or less)
}

// Parties:
//   Client -> Node
// Description:
//   Download a file from the local node based on its hash
// Response status:
//   - SUCCESS if you have the file
//   - MESSAGE_ERROR if the filehash is not 16 bytes long
//   - UNABLE_TO_COMPLETE if you do not have the file
//   - PROCESSING_ERROR in all other cases
message DownloadRequest {
    bytes fileHash = 1; // MD5 of the file content
}
message DownloadResponse {
    Status status = 1;
    string errorMessage = 2;
    bytes data = 3; // File content
}

// Wrapper message
message Message {
    enum Type {
        LOCAL_SEARCH_REQUEST = 0;
        LOCAL_SEARCH_RESPONSE = 1;
        SEARCH_REQUEST = 2;
        SEARCH_RESPONSE = 3;
        UPLOAD_REQUEST = 4;
        UPLOAD_RESPONSE = 5;
        REPLICATE_REQUEST = 6;
        REPLICATE_RESPONSE = 7;
        CHUNK_REQUEST = 8;
        CHUNK_RESPONSE = 9;
        DOWNLOAD_REQUEST = 10;
        DOWNLOAD_RESPONSE = 11;
        REGISTRATION_REQUEST = 12;
        REGISTRATION_RESPONSE = 13;
        SUBNET_REQUEST = 14;
        SUBNET_RESPONSE = 15;
    }

    Type type = 1;

    LocalSearchRequest localSearchRequest = 2;
    LocalSearchResponse localSearchResponse = 3;
    SearchRequest searchRequest = 4;
    SearchResponse searchResponse = 5;
    UploadRequest uploadRequest = 6;
    UploadResponse uploadResponse = 7;
    ReplicateRequest replicateRequest = 8;
    ReplicateResponse replicateResponse = 9;
    ChunkRequest chunkRequest = 10;
    ChunkResponse chunkResponse = 11;
    DownloadRequest downloadRequest = 12;
    DownloadResponse downloadResponse = 13;
    RegistrationRequest registrationRequest = 14;
    RegistrationResponse registrationResponse = 15;
    SubnetRequest subnetRequest = 16;
    SubnetResponse subnetResponse = 17;
}